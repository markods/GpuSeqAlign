// algorithm parameters
{
   "NwAlign_Cpu1_St_Row":
   { },
   "NwAlign_Cpu2_St_Diag":
   { },
   "NwAlign_Cpu3_St_DiagRow":
   {
      // // size of square block (that will be a unit of work)
      // // +   8*(16 ints) on standard architectures, or 8 cache lines
      // int blocksz = 8 * 64/*B*//sizeof( int );
      // actual best is 8196
      "blocksz":  [ 1024 ]
   },
   "NwAlign_Cpu4_Mt_DiagRow":
   {
      // // size of square block (that will be a unit of work)
      // // +   8*(16 ints) on standard architectures, or 8 cache lines
      // int blocksz = 8 * 64/*B*//sizeof( int );
      "blocksz": [ 512 ]
   },
   "NwAlign_Gpu1_Ml_Diag":
   {
      // // number of threads per block
      // // +   the tile is one-dimensional
      // unsigned threadsPerBlock = 8*warpsz;
      "threadsPerBlock": [ 64 ]
   },
   "NwAlign_Gpu2_Ml_DiagRow2Pass":
   {
      // // tile size for the kernel B
      // unsigned tileBx = 8;
      "tileBx": [ 7 ],
      // unsigned tileBy = 4;
      "tileBy": [ 3 ],
      // // number of threads per block for kernels A and B
      // unsigned threadsPerBlockA = 16*warpsz;
      // unsigned threadsPerBlockB = 8*warpsz;
      "threadsPerBlock": [ 128 ]
   },
   "NwAlign_Gpu3_Ml_DiagDiag":
   {
      // // number of threads per block for kernel A
      // unsigned threadsPerBlockA = 16*warpsz;
      "threadsPerBlockA": [ 128 ],
      // // tile size for the kernel
      // // +   tile B must have one dimension fixed to the number of threads in a warp
      // unsigned tileBx = 40;
      "tileBx": [ 62 ],
      // unsigned tileBy = warpsz;
      "tileBy": [ 32 ]
   },
   "NwAlign_Gpu4_Ml_DiagDiag2Pass":
   {
      // // tile sizes for kernels A and B
      // // +   tile A should have one dimension be a multiple of the warp size for full memory coallescing
      // // +   tile B must have one dimension fixed to the number of threads in a warp
      // unsigned tileAx = 1*warpsz;
      "tileAx": [ 384 ],
      // unsigned tileAy = 32;
      "tileAy": [ 20 ],
      // unsigned tileBx = 60;
      "tileBx": [ 66 ],
      // unsigned tileBy = warpsz;
      "tileBy": [ 32 ]
   },
   "NwAlign_Gpu5_Coop_DiagDiag":
   {
      // // tile size for the kernel
      // // +   tile A must have one dimension fixed to the number of threads in a warp
      // unsigned tileAx = 40;
      "tileAx": [ 62 ],
      // unsigned tileAy = warpsz;
      "tileAy": [ 32 ]
   },
   "NwAlign_Gpu6_Coop_DiagDiag2Pass":
   {
      // // tile sizes for kernels A and B
      // // +   tile A should have one dimension be a multiple of the warp size for full memory coallescing
      // // +   tile B must have one dimension fixed to the number of threads in a warp
      // unsigned tileAx = 1*warpsz;
      "tileAx": [ 384 ],
      // unsigned tileAy = 32;
      "tileAy": [ 20 ],
      // unsigned tileBx = 60;
      "tileBx": [ 66 ],
      // unsigned tileBy = warpsz;
      "tileBy": [ 32 ]
   },
   "NwAlign_Gpu10_Mlsp_DiagDiagDiagSkew2":
   {
      // // tile size for the kernel
      // unsigned tileAx = 320;
      "tileAx": [ 320 ],
      // unsigned tileAy = 4*warpsz;   // must be a multiple of the warp size
      "tileAy": [ 128 ],
      // int chunksz = 32;
      "chunksz": [ 32 ]
   }
}
